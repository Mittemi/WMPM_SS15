package carrental.beans.billing;

import org.apache.camel.Exchange;
import org.springframework.stereotype.Component;
import carrental.model.billing.Claim;
import carrental.model.billing.Invoice;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * Created by Alexander on 23.05.2015
 */

@Component
public class PrintBean {
	
    public void createPdf(Exchange exchange) throws Exception {
        Invoice invoice=(Invoice) exchange.getIn().getBody();
        File f = generatePDF(invoice);
        exchange.getIn().setBody(f);
        exchange.setProperty("receiverEmailAddress", invoice.getCustomer().getEmailAddress());
        exchange.setProperty("receiverName", invoice.getCustomer().getName());
        
        System.out.println("BillingPoint.PDF_Printer: Generation of '"+f.getName()+"' completed.");
    }
	
    private File generatePDF(Invoice invoice) throws DocumentException, FileNotFoundException{
    	String RESULT = "invoices/Invoice_"+invoice.getNumber()+"_"+invoice.getCustomer().getName()+".pdf";

    	Document document = new Document();
        PdfWriter.getInstance(document, new FileOutputStream(RESULT));
        document.open();
        
        addMetaData(document,invoice);
        addTitlePage(document,invoice);
        addSecondPage(document,invoice);
        addContentFirstPage(document, invoice);
        addContentSecondPage(document, invoice);
        
        document.close();
     
        File f=new File("mailing/draft/Invoice_"+invoice.getNumber()+"_"+invoice.getCustomer().getName()+".pdf");
        return f;
    }
    
    private void addMetaData(Document document, Invoice invoice){
  	  	document.addTitle("Invoice (ID:"+invoice.getId()+")");
        document.addSubject("Invoice for "+invoice.getCustomer());
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("FHKME Carrental AG");
        document.addCreator("carrental application");
    }
  
    private void addTitlePage(Document document, Invoice invoice) throws DocumentException{
	  	Font headerFont = new Font(Font.FontFamily.TIMES_ROMAN, 22,Font.BOLD);
	  	Paragraph preface = new Paragraph();
	    addEmptyLine(preface, 1);
	    preface.add(new Paragraph("INVOICE (Nr.: "+invoice.getNumber()+")",headerFont));
	
	    addEmptyLine(preface, 1);
	    preface.add(new Paragraph("Invoice generated by FHKME Carrental AG" + ", " + new Date()));
	    
	    addEmptyLine(preface, 1);
	    preface.add(new Paragraph("Customer details: "));	    
	    preface.add(new Paragraph("name: "+invoice.getCustomer().getName()));
	    preface.add(new Paragraph("address: "+invoice.getCustomer().getAddress()));
	    preface.add(new Paragraph("email-address: "+invoice.getCustomer().getEmailAddress()));
	    preface.add(new Paragraph("birthday: "+invoice.getCustomer().getBirthday()));
	    preface.add(new Paragraph("driving-licence: "+invoice.getCustomer().getDrivingLicense()));	    
	
	    document.add(preface);
	    document.newPage();
    }
    
    private void addSecondPage(Document document, Invoice invoice) throws DocumentException{	    
    	Paragraph preface = new Paragraph();
	  	addEmptyLine(preface, 1);	
	  	preface.add(new Paragraph("Dear "+invoice.getCustomer().getName()+" !\n\nThank you very much for driving with FHKME Carrental AG! The contractual details as well as your usage statistics are listed on the first page. On the second page you will find a comprehensive tabulation of the costs.\n\n\n Yours sincerely,\nConstantin Fränkel, Thomas Hießl, Hamed Khosravi, Michael Mittermayr and Alexander Eigner!"));
	    document.add(preface);
	    document.newPage();
    }
    
    private static void addContentFirstPage(Document document, Invoice invoice) throws DocumentException{
    	Anchor anchor = new Anchor("Contractual details");
        anchor.setName("Contractual details");

        Chapter chapter = new Chapter(new Paragraph(anchor), 1);

        Paragraph subParagraph1= new Paragraph("Car details");
	    addEmptyLine(subParagraph1, 1);
        Section section1 = chapter.addSection(subParagraph1);
        createContractualDetailsTable(section1,invoice);
        
        Paragraph subParagraph2= new Paragraph("Usage statistics");
	    addEmptyLine(subParagraph2, 1);
        Section section2 = chapter.addSection(subParagraph2);
        createUsageStatisticsTable(section2,invoice);
        document.add(chapter);
        
        document.newPage();
    }
    
    private static void addContentSecondPage(Document document, Invoice invoice) throws DocumentException{
    	
    	Anchor anchor = new Anchor("Calculation of costs");
        anchor.setName("Calculation of costs");

        Chapter chapter = new Chapter(new Paragraph(anchor), 2);
        
        Paragraph subParagraph3= new Paragraph("Driving costs");
	    addEmptyLine(subParagraph3, 1);
        Section section3 = chapter.addSection(subParagraph3);
        createTravelCostsTable(section3,invoice);
        
        Paragraph subParagraph4 = new Paragraph("Service costs");
	    addEmptyLine(subParagraph4, 1);
        Section section4 = chapter.addSection(subParagraph4);
        createServiceCostsTable(section4, invoice);
        
        Paragraph subParagraph5 = new Paragraph("Total costs");
        addEmptyLine(subParagraph5, 1);
        Section section5 = chapter.addSection(subParagraph5);
        createTotalCostsTable(section5,invoice);
        
        document.add(chapter);

    }
    
    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
          paragraph.add(new Paragraph(" "));
        }
    }
    
    private static void createTravelCostsTable(Section section, Invoice invoice) throws BadElementException {
    	PdfPTable table = new PdfPTable(2);

	    PdfPCell c1 = new PdfPCell(new Phrase("cost category"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    c1 = new PdfPCell(new Phrase("fees"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    table.setHeaderRows(1);
	    	    
	    table.addCell("Driving costs before tax ");
	    table.addCell(invoice.getDrivingCostsBeforeTax()+" EUR");
	    table.addCell("sales tax ("+invoice.getSalesTaxRate()*100+" %)");
	    table.addCell(invoice.getSalesTaxAmount_driving() + " EUR");
	    table.addCell("total");
	    table.addCell(invoice.getDrivingCosts()+" EUR");
	    
	    section.add(table);
    }
    
    private static void createContractualDetailsTable(Section section, Invoice invoice) throws BadElementException {
    	PdfPTable table = new PdfPTable(2);

 	    PdfPCell c1 = new PdfPCell(new Phrase("category"));
 	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
 	    table.addCell(c1);

 	    c1 = new PdfPCell(new Phrase("value"));
 	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
 	    table.addCell(c1);

 	    table.setHeaderRows(1);
 	    
 	    table.addCell("Car model");
 	    table.addCell(invoice.getCar().getDescription());
 	    table.addCell("Car color");
	    table.addCell(invoice.getCar().getColor());
	    table.addCell("Car power");
 	    table.addCell(invoice.getCar().getPower()+" hp");
 	    table.addCell("Car licence-plate");
	    table.addCell(invoice.getCar().getLicensePlate());
	    table.addCell("Price-per-Day ");
 	    table.addCell(invoice.getCar().getPricePerDay()+" EUR");
 	    
 	    section.add(table);
    }
    
    private static void createUsageStatisticsTable(Section section, Invoice invoice) throws BadElementException {
    	PdfPTable table = new PdfPTable(2);

 	    PdfPCell c1 = new PdfPCell(new Phrase("category"));
 	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
 	    table.addCell(c1);

 	    c1 = new PdfPCell(new Phrase("value"));
 	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
 	    table.addCell(c1);
 	    
 	    SimpleDateFormat sdf=new SimpleDateFormat("MM/dd/yyyy");
 	    
 	    table.setHeaderRows(1);
 	    table.addCell("Day of reservation");
 	    table.addCell(sdf.format(invoice.getReservationDate()));  
 	   table.addCell("Day of return");
	    table.addCell(sdf.format(invoice.getReturnDate()));  
 	    table.addCell("Number of days used");
 	    table.addCell(invoice.getDaysUsed()+" days");
 	   
 	    section.add(table);
    }
    
    private static void createServiceCostsTable(Section section, Invoice invoice) throws BadElementException {
    	    PdfPTable table = new PdfPTable(2);

    	    PdfPCell c1 = new PdfPCell(new Phrase("cost category"));
    	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    	    table.addCell(c1);

    	    c1 = new PdfPCell(new Phrase("fees"));
    	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    	    table.addCell(c1);

    	    table.setHeaderRows(1);
    	        	    
    	    
    	    for(Claim c:invoice.getClaims()){
    	    	table.addCell(c.getClaimType().name()+" service");
    	    	table.addCell(c.getCosts()+" EUR");
    	    }
    	    
    	    table.addCell("total service costs before tax");
    	    table.addCell(invoice.getTotalServiceCostsBeforeTax()+" EUR");
    	    
    	    table.addCell("sales tax ("+invoice.getSalesTaxRate()*100+" %)");
    	    table.addCell(invoice.getSalesTaxAmount_service()+" EUR");
    	    table.addCell("total");
    	    table.addCell(invoice.getServiceCosts()+" EUR");
    	    
    	    section.add(table);
    }
    
    private static void createTotalCostsTable(Section section, Invoice invoice) throws BadElementException {
	    PdfPTable table = new PdfPTable(2);

	    PdfPCell c1 = new PdfPCell(new Phrase("cost category"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    c1 = new PdfPCell(new Phrase("fees"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    table.setHeaderRows(1);
	        	    
	    table.addCell("Total driving costs");
	    table.addCell(invoice.getDrivingCosts()+" EUR");
	    table.addCell("Total service costs");
	    table.addCell(invoice.getServiceCosts()+" EUR");
	    table.addCell("total");
	    table.addCell(invoice.getTotalCosts()+" EUR");
	    
	    section.add(table);
    }
 
}
